upstream foo {


        server  10.109.227.228:9400 max_fails=10 fail_timeout=10s;
        #server 10.10.11.99:8787 max_fails=10 fail_timeout=10s;

         check interval=3000 rise=2 fall=5 timeout=1000 type=http;
         check_http_send "HEAD / HTTP/1.0\r\n\r\n";
         check_http_expect_alive http_2xx http_3xx;

         #session_sticky;

}

#upstream frontmir {
       #server 10.10.11.65:9745;
#}


# 排队区域大小以及速率
limit_req_zone     $server_name zone=req_zone:20m rate=120r/s;

# 日志格式
log_format    bodylog '| $server_name | $remote_user | [$time_local] | $request'
                      '| $status | $body_bytes_sent | "$http_referer" '
                      '| $upstream_addr | $upstream_response_time | $upstream_status '
                      '| "$http_user_agent" | "$http_x_forwarded_for" | $request_time | $track_id';
# 日志切割

map $time_iso8601 $logdate {
         '~^(?<ymd>\d{4}-\d{2}-\d{2})'   $ymd;
        default                         'nodate';
   }


# kafka配置

kafka;
kafka_broker_list 10.244.4.158:9092 10.244.2.104:9092 10.244.1.140:9092;

#避免解析失败
resolver 8.8.8.8;

server {

     listen 7871;
     server_name localhost;
     root  html/cloud;
     index index.html;


     set_by_lua $rdm_number '
     	return math.random(1000000000, os.time())
     ';

     # 镜像站点配置
     #location = /mirror {

    #    internal;
	#    proxy_pass http://127.0.0.1:10701$request_uri;
	#	proxy_pass_request_body off;
	#	proxy_set_header Content-Length "";
	#	proxy_set_header X-Original-URI $request_uri;
    # }

    # 源站配置
     location / {
	 #    mirror /mirror;


         proxy_redirect off;
         limit_req	      zone=req_zone burst=10000;
         proxy_set_header     Host $host;
         proxy_set_header     X-Real-IP $remote_addr;
         proxy_set_header     REMOTE-HOST $remote_addr;
         proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;

	     set $track_id		  $msec$rdm_number;
         proxy_set_header         X-Cld-Track-Id  $track_id;


         rewrite_by_lua_file   conf/lua/redis_ngx.lua;
         proxy_pass http://foo;
         access_log  logs/acclogs/frontOr_${logdate}.log  bodylog;

     }

     location ^~ /cloud/license {

        proxy_pass http://119.90.43.110/aliveLicense/license/check;
     }
     location /test_cloud {

        proxy_pass http://foo;

	    rewrite_by_lua_file conf/lua/test.lua;
        access_log  logs/acclogs/cloud_${logdate}.log  bodylog;
     }

     location ~ ^/api/([-_a-zA-Z0-9/]+) {
              # 准入阶段完成参数校验
              access_by_lua_file lua/cloud_param_check.lua;

              # 内容生成阶段
              # content_by_lua_block {

              #     local args = ngx.req.get_uri_args()
              #     ngx.say(args.c)

              # }
              #
              # content_by_lua_file lua/con_param.lua;

      }
     # auth jwt token
     set $merchant_no '';
     location /auth/token {
         # content_by_lua_file conf/lua/oauth_test.lua;
         # access_by_lua '
         #   ngx.say("hello jwt")
         # ';
          access_by_lua '
            local jwt = require("resty.ngx-jwt")
            jwt.auth()
          ';
          proxy_redirect off;
          limit_req        zone=req_zone burst=10000;
          proxy_set_header     Host $host;
          proxy_set_header     X-Real-IP $remote_addr;
          proxy_set_header     REMOTE-HOST $remote_addr;
          proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;

          set $track_id        $msec$rdm_number;
          proxy_set_header         X-Cld-Track-Id  $track_id;

          proxy_set_header merchant_no $merchant_no;
          proxy_pass http://foo;
          access_log  logs/acclogs/token_${logdate}.log  bodylog;
     }
   #test generate jwt token
    location /z {

       content_by_lua '
            local cjson = require "cjson"
                local jwt = require "resty.jwt"

                local jwt_token = jwt:sign(
                    "www.fosafer.com",
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={clientId="1234567890",isss="fosafer.com",exp=1580464383,iat=1577781822}
                    }
                )
                ngx.say(jwt_token)
         ';
          access_log  logs/acclogs/cloud_${logdate}.log  bodylog;
    }
    #generate jwt token
    location /token {

            content_by_lua_file  /usr/local/openresty/nginx/jwt-lua/resty/gen-token.lua;
            access_log  logs/acclogs/cloud_${logdate}.log  bodylog;

    }

}

# mirror logs set up

#server {

#   listen 127.0.0.1:10701;
#   location / {
#       access_log  logs/mirlogs/mirFront_${logdate}.log  bodylog;
#       proxy_pass http://frontmir;
#   }

#}

server {

     listen 7872;
     server_name localhost;
     root  html/cloud;
     index index.html;


     set_by_lua $rdm_number '
        return math.random(1000000000, os.time())
     ';

     set $merchant_no '';
     set $product_info '';
     set $contract_id '';

     location / {
          access_by_lua '
            local jwt = require("resty.ngx-jwt")
            jwt.auth()
          ';
          proxy_redirect off;
          limit_req        zone=req_zone burst=10000;
          proxy_set_header     Host $host;
          proxy_set_header     X-Real-IP $remote_addr;
          proxy_set_header     REMOTE-HOST $remote_addr;
          proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;

          set $track_id        $msec$rdm_number;
          proxy_set_header         X-Cld-Track-Id  $track_id;
          proxy_set_header merchant_no $merchant_no;
          proxy_set_header product_info $product_info;
          proxy_set_header contract_id $contract_id;
          proxy_pass http://foo;
          access_log  logs/acclogs/token_${logdate}.log  bodylog;
     }

}
