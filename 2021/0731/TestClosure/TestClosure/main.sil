sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

enum Fruits {
  case apple(Int)
  case banana(Int, Double)
  case peach(String, Double, Int)
}

@_hasStorage @_hasInitialValue let f: Fruits { get }

// f
sil_global hidden [let] @main.f : main.Fruits : $Fruits

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @main.f : main.Fruits             // id: %2
  %3 = global_addr @main.f : main.Fruits : $*Fruits // user: %17
  %4 = metatype $@thin Fruits.Type
  %5 = string_literal utf8 "taozi"                // user: %10
  %6 = integer_literal $Builtin.Word, 5           // user: %10
  %7 = integer_literal $Builtin.Int1, -1          // user: %10
  %8 = metatype $@thin String.Type                // user: %10
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %9 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %10
  %10 = apply %9(%5, %6, %7, %8) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %15
  %11 = float_literal $Builtin.FPIEEE64, 0x40285C28F5C28F5C // 12.18 // user: %12
  %12 = struct $Double (%11 : $Builtin.FPIEEE64)  // user: %15
  %13 = integer_literal $Builtin.Int64, 2021      // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // user: %15
  %15 = tuple (%10 : $String, %12 : $Double, %14 : $Int) // user: %16
  %16 = enum $Fruits, #Fruits.peach!enumelt, %15 : $(String, Double, Int) // user: %17
  store %16 to %3 : $*Fruits                      // id: %17
  %18 = integer_literal $Builtin.Int32, 0         // user: %19
  %19 = struct $Int32 (%18 : $Builtin.Int32)      // user: %20
  return %19 : $Int32                             // id: %20
} // end sil function 'main'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// Double.init(_builtinFloatLiteral:)
sil public_external [transparent] [serialized] @Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE80) -> Swift.Double : $@convention(method) (Builtin.FPIEEE80, @thin Double.Type) -> Double {
// %0                                             // user: %2
bb0(%0 : $Builtin.FPIEEE80, %1 : $@thin Double.Type):
  %2 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64 // user: %3
  %3 = struct $Double (%2 : $Builtin.FPIEEE64)    // user: %4
  return %3 : $Double                             // id: %4
} // end sil function 'Swift.Double.init(_builtinFloatLiteral: Builtin.FPIEEE80) -> Swift.Double'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function 'Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int'



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => 'main.swift'


